{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red254\green112\blue56;}
{\*\expandedcolortbl;;\csgenericrgb\c99608\c43922\c21961;}
\paperw11900\paperh16840\margl1440\margr1440\vieww22800\viewh12260\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs48 \cf0 Notes on time complexity of algorithms ::\
\

\fs36 \cf2 Big(O) is the notation that is used to represent time complexity of algos \
\
1. O(1) - the also which execute no matter how big the array is, if we want to add an element in an array, this is the example of order 1.\
\
2. O(n) - time grows in direct proportion as the size of the array, linear search is its best example.\
\
3. O(n^2) - time would be proportional to the square of number of elements in the array, iteration inside iterations, example is bubble sort \
			algorithm.\
\
4. O(log N) - data is decreased roughly to 50% after each iteration of the loop, binary search is the example of this.\
\
* the net complexity of loop inside loop is the product of individual time complexities of both the loops.\
\
 }